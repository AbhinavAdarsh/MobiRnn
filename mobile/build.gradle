import groovy.io.FileType

apply plugin: 'com.android.application'

def keystorePropertiesFile = rootProject.file("local.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner rootProject.ext.android.testInstrumentationRunner
        externalNativeBuild {
            cmake {
                cppFlags rootProject.ext.android.cppFlags
                abiFilters rootProject.ext.android.abiFilters
            }
        }
    }

    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile rootProject.file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug{
            signingConfig signingConfigs.config
        }
        release {
            signingConfig signingConfigs.config
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['../libs']
        }
    }
    lintOptions {
        //lint rules of conduct
        abortOnError true
        htmlReport true
    }
}

configurations {
    lol
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    //wearApp project(':wear')
    compile rootProject.ext.dependencies["annotation"]
    compile rootProject.ext.dependencies["compat"]
    compile rootProject.ext.dependencies["ioutil"]
    compile rootProject.ext.dependencies["logger"]
    lol rootProject.ext.dependencies["eigen"]
    compile rootProject.ext.dependencies["tensorflow"]

    testCompile rootProject.ext.dependencies["junit"]
}


task prepareEigen(type: Copy) {
    def zipPath = configurations.lol.find { it.name.startsWith("eigen") }

    from zipTree(file(zipPath)).matching {
        include "*/Eigen/**"
    }
    into("${project.buildDir}")

    doLast{
        file("${project.buildDir}").eachFileMatch(FileType.DIRECTORIES, ~/eigen.*/) {
            mFile -> mFile.renameTo("${project.buildDir}/eigen")
        }
    }

}

preBuild.dependsOn prepareEigen

task publish(type: Copy) {
    from fileTree("build/outputs/apk/")
    into("../blob/")
    include "*-release.apk"
}
publish.dependsOn build
